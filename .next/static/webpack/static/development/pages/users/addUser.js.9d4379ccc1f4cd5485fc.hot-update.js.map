{"version":3,"file":"static/webpack/static/development/pages/users/addUser.js.9d4379ccc1f4cd5485fc.hot-update.js","sources":["webpack:///./forms/users/addUserForm.tsx","webpack:///./forms/users/addUserFormSetup.ts","webpack:///./pages/users/addUser.tsx"],"sourcesContent":["import React from \"react\";\nimport { observer } from \"mobx-react\";\n\nexport default observer(({ form }) => (\n  <form onSubmit={form.onSubmit}>\n    <label htmlFor={form.$(\"name\").id}>{form.$(\"name\").label}</label>\n    <input {...form.$(\"name\").bind()} />\n    <p>{form.$(\"name\").error}</p>\n\n    <button type=\"submit\" onClick={form.onSubmit}>\n      Submit\n    </button>\n    <button type=\"button\" onClick={form.onClear}>\n      Clear\n    </button>\n    <button type=\"button\" onClick={form.onReset}>\n      Reset\n    </button>\n\n    <p>{form.error}</p>\n  </form>\n));\n","import { Form } from \"mobx-react-form\";\nimport validatorjs from \"validatorjs\";\n\nexport default class AddUserForm extends Form {\n  mutation;\n  /*\n      Below we are returning a `plugins` object using the `validatorjs` package\n      to enable `DVR` functionalities (Declarative Validation Rules).\n    */\n  plugins() {\n    return { dvr: validatorjs };\n  }\n\n  /*\n      Return the `fields` as a collection into the `setup()` method\n      with a `rules` property for the validation.\n    */\n  setup() {\n    return {\n      fields: [\n        {\n          name: \"name\",\n          label: \"Name\",\n          placeholder: \"Insert Name\",\n          rules: \"required|string|between:5,25\"\n        }\n      ]\n    };\n  }\n\n  /*\n      Event Hooks\n    */\n  hooks() {\n    return {\n      /*\n          Success Validation Hook\n        */\n      onSuccess(form) {\n        this.mutation({ variables: { data: { ...form.values() } } });\n        console.log(\"Form Values!\", form.values());\n      },\n      /*\n          Error Validation Hook\n        */\n      onError(form) {\n        // get all form errors\n        console.log(\"All form errors\", form.errors());\n      }\n    };\n  }\n}\n","import App from \"../../components/App\";\nimport Header from \"../../components/Header\";\nimport AddUserForm from \"../../forms/users/addUserForm\";\nimport AddUserFormSetup from \"../../forms/users/addUserFormSetup\";\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\n\nexport const addUserMutation = gql`\n  mutation createUser($data: UserCreateInput!) {\n    createUser(data: $data) {\n      id\n      name\n    }\n  }\n`;\n\nconst form = new AddUserFormSetup();\n\nexport default () => (\n  <App>\n    <Header />\n    <Mutation mutation={addUserMutation}>\n      {(createUser, { data }) => {\n        form.mutation = createUser;\n        return <AddUserForm form={form} />;\n      }}\n    </Mutation>\n  </App>\n);\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;;;;;;;AAEA;;;;AAIA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAFA;AAUA;AAEA;;;;;;AAGA;AACA;AACA;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;;;AAGA;AACA;AACA;AACA;AAdA;AAgBA;;;;AA/CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAEA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAPA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}