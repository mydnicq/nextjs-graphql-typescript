{"version":3,"file":"static/webpack/static/development/pages/_app.js.f764835ba56fe6f5db22.hot-update.js","sources":["webpack:///./lib/InitApollo.ts"],"sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  HttpLink,\n  ApolloLink\n} from \"apollo-boost\";\nimport { withClientState } from \"apollo-link-state\";\nimport fetch from \"isomorphic-unfetch\";\nimport { NormalizedCacheObject } from \"apollo-cache-inmemory\";\n\nexport interface Global {\n  document: Document;\n  window: Window;\n  fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;\n}\ndeclare var global: Global;\n\nclass InitApollo {\n  private isBrowser = null;\n  private apolloClient;\n\n  constructor() {\n    console.log(this.isBrowser);\n    this.isBrowser = typeof window !== \"undefined\";\n    // Polyfill fetch() on the server (used by apollo-client)\n    if (!this.isBrowser) {\n      global.fetch = fetch;\n    }\n  }\n\n  private create(initialState: NormalizedCacheObject) {\n    const cache = new InMemoryCache().restore(initialState || {});\n\n    const httpLink = new HttpLink({\n      credentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n      uri: \"http://localhost:3000/graphql\" // Server URL (must be absolute)\n    });\n\n    const stateLink = withClientState({\n      cache,\n      defaults: {\n        isConnected: true\n      },\n      resolvers: {\n        Mutation: {\n          updateNetworkStatus: (_, { isConnected }, { cache }) => {\n            cache.writeData({ data: { isConnected } });\n            return null;\n          }\n        }\n      }\n    });\n\n    return new ApolloClient({\n      cache,\n      connectToDevTools: this.isBrowser,\n      link: ApolloLink.from([stateLink, httpLink]),\n      ssrMode: !this.isBrowser // Disables forceFetch on the server (so queries are only run once)\n    });\n  }\n\n  getApolloClient(initialState: NormalizedCacheObject) {\n    // Make sure to create a new client for every server-side request so that data\n    // isn't shared between connections (which would be bad)\n    if (!this.isBrowser) {\n      return this.create(initialState);\n    }\n\n    // Reuse client on the client-side\n    if (!this.apolloClient) {\n      this.apolloClient = this.create(initialState);\n    }\n\n    return this.apolloClient;\n  }\n}\n\nexport default new InitApollo();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAMA;AACA;AACA;AASA;;;AAIA;AAAA;AACA;AAJA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AADA;AALA;AAeA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;;;;;A","sourceRoot":""}