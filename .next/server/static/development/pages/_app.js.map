{"version":3,"file":"static/development/pages/_app.js","sources":["webpack:///webpack/bootstrap","webpack:///./lib/InitApollo.ts","webpack:///./lib/with-apollo-client.tsx","webpack:///./pages/_app.tsx","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"apollo-boost\"","webpack:///external \"apollo-link-state\"","webpack:///external \"isomorphic-unfetch\"","webpack:///external \"next/app\"","webpack:///external \"next/head\"","webpack:///external \"react\"","webpack:///external \"react-apollo\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {\n  ApolloClient,\n  InMemoryCache,\n  HttpLink,\n  ApolloLink\n} from \"apollo-boost\";\nimport { withClientState } from \"apollo-link-state\";\nimport fetch from \"isomorphic-unfetch\";\nimport { NormalizedCacheObject } from \"apollo-cache-inmemory\";\n\nexport interface Global {\n  document: Document;\n  window: Window;\n  fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;\n}\ndeclare var global: Global;\n\nclass InitApollo {\n  private isBrowser;\n  private apolloClient;\n\n  constructor() {\n    this.isBrowser = typeof window !== \"undefined\";\n    // Polyfill fetch() on the server (used by apollo-client)\n    if (!this.isBrowser) {\n      global.fetch = fetch;\n    }\n  }\n\n  private create(initialState: NormalizedCacheObject) {\n    const cache = new InMemoryCache().restore(initialState || {});\n\n    const httpLink = new HttpLink({\n      credentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n      uri: \"http://localhost:3000/graphql\" // Server URL (must be absolute)\n    });\n\n    const stateLink = withClientState({\n      cache,\n      defaults: {\n        isConnected: true\n      },\n      resolvers: {\n        Mutation: {\n          updateNetworkStatus: (_, { isConnected }, { cache }) => {\n            cache.writeData({ data: { isConnected } });\n            return null;\n          }\n        }\n      }\n    });\n\n    return new ApolloClient({\n      cache,\n      connectToDevTools: this.isBrowser,\n      link: ApolloLink.from([stateLink, httpLink]),\n      ssrMode: !this.isBrowser // Disables forceFetch on the server (so queries are only run once)\n    });\n  }\n\n  getApolloClient(initialState: NormalizedCacheObject) {\n    // Make sure to create a new client for every server-side request so that data\n    // isn't shared between connections (which would be bad)\n    if (!this.isBrowser) {\n      return this.create(initialState);\n    }\n\n    // Reuse client on the client-side\n    if (!this.apolloClient) {\n      this.apolloClient = this.create(initialState);\n    }\n\n    return this.apolloClient;\n  }\n}\n\nexport default new InitApollo();\n","import React from \"react\";\nimport initApollo from \"./InitApollo\";\nimport Head from \"next/head\";\nimport { getDataFromTree } from \"react-apollo\";\n\nconst isBrowser = typeof window !== \"undefined\";\n\nexport default App => {\n  return class Apollo extends React.Component {\n    private apolloClient;\n\n    static displayName = \"withApollo(App)\";\n    static async getInitialProps(props) {\n      const { Component, router } = props;\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(props);\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo.getApolloClient({});\n      if (!isBrowser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error(\"Error while running `getDataFromTree`\", error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState\n      };\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo.getApolloClient(props.apolloState);\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n","import App, { Container } from \"next/app\";\nimport React from \"react\";\nimport withApolloClient from \"../lib/with-apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\n\nclass MyApp extends App {\n  private props;\n\n  render() {\n    const { Component, pageProps, apolloClient } = this.props;\n    return (\n      <Container>\n        <ApolloProvider client={apolloClient}>\n          <Component {...pageProps} />\n        </ApolloProvider>\n      </Container>\n    );\n  }\n}\n\nexport default withApolloClient(MyApp);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"apollo-boost\");","module.exports = require(\"apollo-link-state\");","module.exports = require(\"isomorphic-unfetch\");","module.exports = require(\"next/app\");","module.exports = require(\"next/head\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AAMA;AACA;AACA;AASA;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AADA;AALA;AAeA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AAEA;AAEA;;;AACA;AAAA;AAAA;AAAA;AACA;AA8CA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;AAnDA;AAAA;AAAA;AAqDA;AAAA;AAAA;AACA;AAtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AARA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AASA;AACA;AAVA;AAYA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AACA;AACA;AAJA;AACA;AApBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA2BA;AACA;AACA;AACA;AACA;AA/BA;AAiCA;AACA;AACA;AACA;AApCA;AAsCA;AACA;AAvCA;AA2CA;AA3CA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAwDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAKA;;;;AAZA;AACA;AAcA;;;;;;;;;;;;;;;;;;;;;;;ACpBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}